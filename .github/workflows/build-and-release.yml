name: CI + Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write 
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: 8.0.x
  PROJECT_NAME: Log_Parser_App

jobs:
  build_and_version:
    name: Build and Determine Version
    runs-on: windows-latest
    outputs:
      FULL_SEM_VER: ${{ steps.version.outputs.fullSemVer }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install GitVersion tool
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'

      - name: Determine semantic version
        id: version
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: false

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_NAME }}.csproj
        working-directory: ./${{ env.PROJECT_NAME }}

      - name: Build solution
        run: dotnet build --no-restore -c Release ${{ env.PROJECT_NAME }}.csproj
        working-directory: ./${{ env.PROJECT_NAME }}

  release:
    name: Publish Release
    needs: build_and_version
    if: needs.build_and_version.result == 'success' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Необходимо для консистентности, хотя версия берется из needs

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish executable
        shell: pwsh
        run: |
          dotnet publish ${{ env.PROJECT_NAME }}.csproj `
            -c Release `
            -r win-x64 `
            --self-contained true `
            -p:PublishSingleFile=true `
            -o ../publish
        working-directory: ./${{ env.PROJECT_NAME }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build_and_version.outputs.FULL_SEM_VER }}
          release_name: Release v${{ needs.build_and_version.outputs.FULL_SEM_VER }}
          body: Automated release of version v${{ needs.build_and_version.outputs.FULL_SEM_VER }}
          draft: false
          prerelease: ${{ contains(needs.build_and_version.outputs.FULL_SEM_VER, '-') }}

      - name: Upload executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/${{ env.PROJECT_NAME }}.exe
          asset_name: ${{ env.PROJECT_NAME }}-${{ needs.build_and_version.outputs.FULL_SEM_VER }}.exe
          asset_content_type: application/octet-stream