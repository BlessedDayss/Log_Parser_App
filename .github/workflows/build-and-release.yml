# .github/workflows/ci-and-release.yml
name: CI + Sonar + Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  checks: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: 8.0.x
  SONAR_ORG: blesseddayss
  SONAR_PROJ: BlessedDayss_Log_Parser_App
  PROJECT_NAME: Log_Parser_App

jobs:
  sonar:
    name: Build · Test · SonarCloud Analysis
    runs-on: windows-latest
    outputs:
      FULL_SEM_VER: ${{ steps.version.outputs.fullSemVer }}
    steps:
      # 1. Checkout & SDK install
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # 2. Trust nuget.org SSL cert on Windows runner
      - name: Trust nuget.org certificate
        shell: pwsh
        run: |
          # import and trust the SSL certificate for api.nuget.org
          yes | certmgr -ssl -m https://api.nuget.org :contentReference[oaicite:0]{index=0}

      # 3. Restore & Build
      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore -c Release

      # 4. Run tests with coverage (PowerShell line-continuations)
      - name: Run tests with coverage
        shell: pwsh
        run: |
          dotnet test ./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj `
            -c Release --no-build `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=coverage.opencover.xml

      # 5. GitVersion for semantic tagging
      - name: Install GitVersion action
        uses: gittools/actions/gitversion/setup@v3.2.1

      - name: Determine semantic version
        id: version
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          useConfigFile: true

      # 6. Install SonarScanner for .NET (working v4.10.0)
      - name: Install dotnet-sonarscanner
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 4.10.0 :contentReference[oaicite:1]{index=1}
      - name: Add global tools to PATH
        run: echo "$Env:USERPROFILE\.dotnet\tools" >> $GITHUB_PATH

      # 7. SonarCloud Begin (with strict Quality Gate, duplication threshold, exclusions)
      - name: SonarCloud Begin
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:${{ env.SONAR_PROJ }} `
            /o:${{ env.SONAR_ORG }} `
            /d:sonar.login=$Env:SONAR_TOKEN `
            /d:sonar.cs.opencover.reportsPaths=coverage.opencover.xml `
            /d:sonar.coverage.exclusions=**/Migrations/** `
            /d:sonar.cpd.exclusions=**/*.generated.cs `
            /d:sonar.duplicatedBlocksThreshold=10 `
            /d:sonar.qualitygate.wait=true

      # 8. SonarCloud End (always run to finalize analysis)
      - name: SonarCloud End
        if: always()
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end `
            /d:sonar.login=$Env:SONAR_TOKEN

  release:
    name: Publish Release
    needs: sonar
    if: needs.sonar.result == 'success' && github.ref == 'refs/heads/main'
    runs-on: windows-latest
    steps:
      # 1. Checkout & SDK
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # 2. Publish single-file executable
      - name: Publish executable
        shell: pwsh
        run: |
          dotnet publish ./Log_Parser_App.csproj `
            -c Release `
            -r win-x64 `
            --self-contained true `
            -p:PublishSingleFile=true `
            -o publish/

      # 3. Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.sonar.outputs.FULL_SEM_VER }}
          release_name: Release v${{ needs.sonar.outputs.FULL_SEM_VER }}
          body: Automated release of version v${{ needs.sonar.outputs.FULL_SEM_VER }}
          draft: false
          prerelease: false

      # 4. Upload the .exe artifact
      - name: Upload executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload \
            --repo ${{ github.repository }} \
            --tag v${{ needs.sonar.outputs.FULL_SEM_VER }} \
            publish/Log_Parser_App.exe \
            --clobber