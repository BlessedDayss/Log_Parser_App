name: CI

on:
  push:
  pull_request:

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: 8.0.x
  SONAR_ORG: CodeBless
  SONAR_PROJ: Log_Parser_App
  PROJECT_NAME: Log_Parser_App

jobs:
  build-test-analyze:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/tools/.store
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global gitversion.tool
        shell: pwsh

      - id: version
        run: |
          dotnet gitversion /showvariable FullSemVer | ForEach-Object {
            echo "FULL_SEM_VER=$_" >> $Env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Sonar begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          $args = @(
            "/key:${{ env.SONAR_PROJ }}",
            "/organization:${{ env.SONAR_ORG }}",
            "/d:sonar.login=$Env:SONAR_TOKEN",
            "/d:sonar.host.url=https://sonarcloud.io",
            "/d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml",
            "/d:sonar.branch.name=${{ github.ref_name }}"
          )
          if ("${{ github.event_name }}" -eq "pull_request") {
            $args += "/d:sonar.pullrequest.key=${{ github.event.number }}"
            $args += "/d:sonar.pullrequest.branch=${{ github.head_ref }}"
            $args += "/d:sonar.pullrequest.base=${{ github.base_ref }}"
          }
          dotnet sonarscanner begin @args

      - run: dotnet restore
        shell: pwsh

      - run: dotnet build -c Release --no-restore
        continue-on-error: true
        shell: pwsh

      - continue-on-error: true
        shell: pwsh
        run: |
          if (Test-Path "./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj") {
            dotnet test ./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj `
              --no-build -c Release `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=opencover `
              /p:CoverletOutput=./coverage/coverage.opencover.xml
          }

      - name: Sonar end
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login=$Env:SONAR_TOKEN
        shell: pwsh

      - run: dotnet publish ./Log_Parser_App.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: publish_artifact
          path: publish/

  sonar-issues:
    needs: build-test-analyze
    runs-on: ubuntu-latest
    steps:
      - id: sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s -H "Authorization: Bearer $SONAR_TOKEN" \
            "https://sonarcloud.io/api/issues/search?componentKeys=${{ env.SONAR_PROJ }}&organization=${{ env.SONAR_ORG }}&statuses=OPEN&types=BUG,VULNERABILITY,CODE_SMELL&ps=500" \
            -o sonar.json
          echo "count=$(jq '.issues|length' sonar.json)" >> $GITHUB_OUTPUT

      - if: steps.sonar.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { issues } = JSON.parse(fs.readFileSync('sonar.json'));
            if (!issues.length) return;
            let projectId;
            if (process.env.PROJECT_NAME) {
              const r = await github.graphql(`
                query($login:String!){
                  user(login:$login){
                    projectsV2(first:100){nodes{id,title}}
                  }
                }`, { login: context.actor });
              projectId = r.user.projectsV2.nodes.find(p => p.title === process.env.PROJECT_NAME)?.id;
            }
            for (const i of issues) {
              const key = i.key;
              const title = `SonarCloud: ${i.rule} (${key})`;
              const dupe = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} "${key}" in:title label:sonar-cloud state:open`
              });
              if (dupe.data.total_count) continue;
              const body = `
                **SonarCloud Issue [${key}]**
                - **Severity**: ${i.severity}
                - **Rule**: ${i.rule}
                - **Location**: ${i.component.replace('${{ env.SONAR_PROJ }}:', '')}:${i.line}
                - **Message**: ${i.message}

                [View in SonarCloud](https://sonarcloud.io/project/issues?id=${{ env.SONAR_PROJ }}&issues=${key}&organization=${{ env.SONAR_ORG }})
              `;
              const { data: created } = await github.rest.issues.create({
                ...context.repo,
                title,
                body,
                labels: ['sonar-cloud', i.severity.toLowerCase()]
              });
              if (projectId) {
                await github.graphql(`
                  mutation($project:ID!,$content:ID!){
                    addProjectV2ItemById(input:{projectId:$project,contentId:$content}){item{id}}
                  }`,
                  { project: projectId, content: created.node_id }
                ).catch(()=>{});
              }
            }