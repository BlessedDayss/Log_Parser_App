name: CI

on:
  push:
  pull_request:

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: 8.0.x
  SONAR_ORG: blesseddayss
  SONAR_PROJ: BlessedDayss_Log_Parser_App
  PROJECT_NAME: Log_Parser_App

jobs:
  build-test-analyze:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: |
          true
        cache-dependency-path: |
          **/*.csproj
          **/packages.lock.json

    - name: Install global tools
      shell: pwsh
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global gitversion.tool

    - name: Calculate version
      id: version
      shell: pwsh
      run: |
        $ver = gitversion /showvariable FullSemVer
        "FULL_SEM_VER=$ver" >> $Env:GITHUB_OUTPUT

    - name: SonarCloud – begin analysis
      shell: pwsh
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        $args = @(
          "/key:${{ env.SONAR_PROJ }}",
          "/organization:${{ env.SONAR_ORG }}",
          "/d:sonar.login=$Env:SONAR_TOKEN",
          "/d:sonar.host.url=https://sonarcloud.io",
          "/d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml",
          "/d:sonar.branch.name=${{ github.ref_name }}"
        )
        if ("${{ github.event_name }}" -eq "pull_request") {
          $args += "/d:sonar.pullrequest.key=${{ github.event.number }}"
          $args += "/d:sonar.pullrequest.branch=${{ github.head_ref }}"
          $args += "/d:sonar.pullrequest.base=${{ github.base_ref }}"
        }
        dotnet sonarscanner begin @args

    - run: dotnet restore
      shell: pwsh

    - run: dotnet build -c Release --no-restore
      shell: pwsh

    - name: Run unit tests (with coverage)
      shell: pwsh
      run: |
        if (Test-Path "./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj") {
          dotnet test ./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj `
            --no-build -c Release `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=./coverage/coverage.opencover.xml
        }

    - name: SonarCloud – end analysis
      shell: pwsh
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner end /d:sonar.login=$Env:SONAR_TOKEN

    - name: Publish win-x64 single-file build
      run: dotnet publish ./Log_Parser_App.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/
      shell: pwsh

    - uses: actions/upload-artifact@v4
      with:
        name: publish_artifact
        path: publish/

  sonar-issues:
    needs: build-test-analyze
    runs-on: ubuntu-latest

    steps:
    - id: sonar
      shell: bash
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        curl -s -H "Authorization: Bearer $SONAR_TOKEN" \
          "https://sonarcloud.io/api/issues/search?componentKeys=${SONAR_PROJ}&organization=${SONAR_ORG}&statuses=OPEN&types=BUG,VULNERABILITY,CODE_SMELL&ps=500" \
          -o sonar.json
        echo "count=$(jq '.issues|length' sonar.json)" >> "$GITHUB_OUTPUT"

    - if: steps.sonar.outputs.count != '0'
      uses: actions/github-script@v7
      env:
        GH_TOKEN: ${{ secrets.GH_PAT || github.token }}
      with:
        github-token: ${{ env.GH_TOKEN }}
        script: |
          const fs = require('fs');
          const sonarData = JSON.parse(fs.readFileSync('sonar.json'));
          console.log('Sonar Data:', JSON.stringify(sonarData, null, 2));
          const sonarIssues = sonarData.issues || [];
          if (!sonarIssues.length) {
            console.log('No Sonar issues found.');
            return;
          }

          const owner = context.repo.owner;
          const repo = context.repo.repo;

          const existing = await github.rest.search.issuesAndPullRequests({
            q: `repo:${owner}/${repo} label:sonar-cloud state:open`,
            per_page: 100
          });
          const existingKeys = new Set(
            (existing.data.items || []).map(i => /\(([^)]+)\)\s*$/.exec(i.title)?.[1]).filter(Boolean)
          );
          console.log('Existing Keys:', Array.from(existingKeys));

          let projectId;
          if (process.env.PROJECT_NAME) {
            const query = `
              query($org: String!) {
                organization(login: $org) {
                  projectsV2(first: 100) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `;
            const variables = { org: process.env.SONAR_ORG };
            const result = await github.graphql(query, variables).catch(err => {
              console.log('GraphQL Error:', err.message);
              return null;
            });
            projectId = result?.organization?.projectsV2?.nodes?.find(
              p => p.title === process.env.PROJECT_NAME
            )?.id;
            console.log('Project ID:', projectId || 'Not found');
          }

          for (const issue of sonarIssues) {
            if (!issue || typeof issue !== 'object') {
              console.log('Invalid issue object:', issue);
              continue;
            }

            const key = issue.key || 'unknown';
            console.log('Processing issue:', key);
            if (existingKeys.has(key)) {
              console.log(`Issue ${key} already exists, skipping.`);
              continue;
            }

            const rule = issue.rule || 'unknown-rule';
            const severity = issue.severity || 'UNKNOWN';
            const component = issue.component || 'unknown-component';
            const line = issue.line != null ? issue.line : 'unknown-line';
            const message = issue.message || 'No message';

            const title = `SonarCloud: ${rule} (${key})`;
            const body = [
              `**SonarCloud Issue [${key}]**`,
              `- **Severity**: ${severity}`,
              `- **Rule**: ${rule}`,
              `- **Location**: ${component.replace(process.env.SONAR_PROJ + ':', '')}:${line}`,
              `- **Message**: ${message}`,
              '',
              `[Посмотреть в SonarCloud](https://sonarcloud.io/project/issues?id=${process.env.SONAR_PROJ}&issues=${key}&organization=${process.env.SONAR_ORG})`
            ].join('\n');

            try {
              const { data: created } = await github.rest.issues.create({
                owner,
                repo,
                title,
                body,
                labels: ['sonar-cloud', severity.toLowerCase()]
              });
              console.log(`Created issue ${key}:`, created.html_url);

              if (projectId) {
                const mutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                      item {
                        id
                      }
                    }
                  }
                `;
                await github.graphql(mutation, {
                  projectId,
                  contentId: created.node_id
                }).catch(err => {
                  console.log(`Failed to add ${key} to project:`, err.message);
                });
              }
            } catch (error) {
              console.error(`Error creating issue ${key}:`, error.message);
            }
          }
