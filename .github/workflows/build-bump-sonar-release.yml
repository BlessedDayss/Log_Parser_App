name: Build, Test, SonarCloud Scan, Bump Version, Release EXE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  # -------------------------------------------------- BUILD + ANALYZE -----------------------------------------------
  build_and_analyze:
    runs-on: windows-latest
    outputs:
      new_version: ${{ steps.bump.outputs.NEW_VERSION }}
      artifact_name: publish_artifact

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install tools (SonarScanner & Coverlet reportgenerator)
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Set Sonar PR parameters
        if: github.event_name == 'pull_request'
        shell: pwsh
        run: |
          echo "SONAR_PR_PARAMS=/d:sonar.pullrequest.key=${{ github.event.pull_request.number }} /d:sonar.pullrequest.branch=${{ github.head_ref }} /d:sonar.pullrequest.base=${{ github.base_ref }}" >> $Env:GITHUB_ENV

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          dotnet sonarscanner begin `
            /k:"Log_Parser_App" `
            /o:"blesseddayss" `
            /d:sonar.login="$Env:SONAR_TOKEN" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.qualitygate.wait=true `
            /d:sonar.cs.opencover.reportsPaths="coverage/coverage.opencover.xml" `
            ${Env:SONAR_PR_PARAMS}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Test with coverage (optional)
        shell: pwsh
        continue-on-error: true
        run: |
          if (Test-Path "./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj") {
            dotnet test ./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj --no-build --configuration Release `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=opencover `
              /p:CoverletOutput=./coverage/coverage.opencover.xml
          } else {
            Write-Host "Test project not found, skipping."
          }

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: dotnet sonarscanner end /d:sonar.login="$Env:SONAR_TOKEN"
      
      # ---------- bump version (только push в main) ----------
      - name: Bump version in csproj
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: bump
        shell: pwsh
        run: |
          $file = './Log_Parser_App.csproj'
          if (-not (Test-Path $file)) { Write-Error "File $file not found"; exit 1 }
          
          $xml = [xml](Get-Content $file)
          $verNode = $xml.Project.PropertyGroup.Version
          if (-not $verNode) {
            $verNode = $xml.CreateElement("Version")
            $verNode.InnerText = '0.1.0'
            $xml.Project.PropertyGroup.AppendChild($verNode) | Out-Null
          } else {
            $parts = $verNode.InnerText.Split('.')
            if ($parts.Length -lt 3) { $parts = @('0','1','0') }
            $parts[2] = ([int]$parts[2] + 1).ToString()
            $verNode.InnerText = "$($parts -join '.')"
          }
          $new = $verNode.InnerText
          $xml.Save($file)
          echo "NEW_VERSION=$new" >> $Env:GITHUB_OUTPUT
          Write-Host "Bumped version to $new"

      - name: Commit version bump
        if: steps.bump.outputs.NEW_VERSION != ''
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add ./Log_Parser_App.csproj
          git commit -m "chore: bump version to v${{ steps.bump.outputs.NEW_VERSION }}"
          git push
      
      # ---------- publish ----------
      - name: Publish application
        shell: pwsh
        run: dotnet publish ./Log_Parser_App.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ jobs.build_and_analyze.outputs.artifact_name }}
          path: publish/
  
  # -------------------------------------------------- RELEASE ---------------------------------------------------------
  release:
    needs: build_and_analyze
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build_and_analyze.outputs.new_version != ''
    runs-on: windows-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_analyze.outputs.artifact_name }}
          path: ./publish

      - name: Show downloaded files
        shell: pwsh
        run: Get-ChildItem -Recurse ./publish

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build_and_analyze.outputs.new_version }}
          release_name: Release v${{ needs.build_and_analyze.outputs.new_version }}
          body: "Automated release of version v${{ needs.build_and_analyze.outputs.new_version }}"
          draft: false
          prerelease: false

      - name: Upload EXE to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/Log_Parser_App.exe
          asset_name: Log_Parser_App_v${{ needs.build_and_analyze.outputs.new_version }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable
