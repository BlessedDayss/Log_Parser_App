name: Build, Optional Test, SonarCloud Scan, Bump Version, Release EXE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarScanner and ReportGenerator
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Set SonarCloud PR parameters
        if: github.event_name == 'pull_request'
        run: |
          echo "SONAR_PR_PARAMS=/d:sonar.pullrequest.key=${{ github.event.pull_request.number }} /d:sonar.pullrequest.branch=${{ github.head_ref }} /d:sonar.pullrequest.base=${{ github.base_ref }}" >> $env:GITHUB_ENV

      - name: Start SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:"Log_Parser_App" `
            /o:"blesseddayss" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.qualitygate.wait=true `
            ${{ env.SONAR_PR_PARAMS }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Run Tests and Collect Coverage (optional)
        continue-on-error: true
        run: |
          if (Test-Path "./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj") {
            dotnet test ./Log_Parser_App.Tests/Log_Parser_App.Tests.csproj `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=cobertura `
              /p:CoverletOutput=../coverage/coverage.xml
          }
          else {
            echo "Test project not found, skipping tests."
          }

      - name: Generate Coverage Report (optional)
        continue-on-error: true
        run: |
          if (Test-Path "./coverage/coverage.xml") {
            reportgenerator `
              -reports:coverage/coverage.xml `
              -targetdir:coverage-report `
              -reporttypes:SonarQube
          }
          else {
            echo "Coverage file not found, skipping report generation."
          }

      - name: Build
        run: dotnet build --configuration Release

      - name: End SonarCloud Analysis
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/

  release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Publish self-contained EXE
        run: dotnet publish --configuration Release --runtime win-x64 --self-contained true -p:PublishSingleFile=true -o publish/

      - name: Bump version in csproj
        id: bump
        run: |
          $file = './Log_Parser_App.csproj'
          $content = Get-Content $file
          $versionLine = Select-String '<Version>(.*)</Version>' -InputObject $content
          if (-not $versionLine) {
            $new = '0.1.0'
            $content = $content -replace '</PropertyGroup>', "  <Version>$new</Version>`n</PropertyGroup>"
          } else {
            $current = $versionLine.Matches.Groups[1].Value
            $parts = $current -split '\.'
            $parts[2] = ([int]$parts[2] + 1).ToString()
            $new = "$($parts[0]).$($parts[1]).$($parts[2])"
            $content = $content -replace "<Version>.*</Version>", "<Version>$new</Version>"
          }
          Set-Content -Path $file -Value $content
          echo "NEW_VERSION=$new" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Commit bumped version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Log_Parser_App.csproj
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }}"
          git push

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: "Automated release of version v${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload EXE as release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/Log_Parser_App.exe
          asset_name: Log_Parser_App.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
